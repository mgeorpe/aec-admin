AEC Local Setup DONE

#################
### Computer Name
#################
I tried this “sudo scutil --set HostName iscs-mac”
It asked for password. I typed it.
Then my prompt still says marknoel@Marks-MacBook-Air ~ %

Let’s fix this host name first. Do not overload your response since it’s annoying. I already told you let’s do it one by one.

Also other questions:
1. How can I copy paste a command to Mac? In windows vs code terminal, I just use shift insert. Here in Mac it doesn’t work.

2. I am not familiar with Mac folder structure. For example this tilde (~), is it right to call this tilde? I don’t know where home points or how to get there?

#####################
### spotlight and finder
#####################
Done remapping spotlight and finder to my preferred shortcut.
Able to reopen terminal now.
Can we change marknoel to mng.

#####################
### Command Line Tools
#####################
xcode-select --install
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
eval "$(/opt/homebrew/bin/brew shellenv)"
brew --version

#####################
### Homebrew
#####################
Done with command line tools.
I run this -> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
It asked for password. I provided.
It says

You are using macOS 13.4.
==> We (and Apple) do not provide support for this old version.
This installation may not succeed.
After installation, you will encounter build failures with some formulae.
Please create pull requests instead of asking for help on Homebrew's GitHub,
Twitter or any other official channels. You are responsible for resolving any
issues you experience while you are running this old version.

==> This script will install:
/opt/homebrew/bin/brew
/opt/homebrew/share/doc/homebrew
/opt/homebrew/share/man/man1/brew.1
/opt/homebrew/share/zsh/site-functions/_brew
/opt/homebrew/etc/bash_completion.d/brew
/opt/homebrew
/etc/paths.d/homebrew
==> The following new directories will be created:
/opt/homebrew/bin
/opt/homebrew/etc
/opt/homebrew/include
/opt/homebrew/lib
/opt/homebrew/sbin
/opt/homebrew/share
/opt/homebrew/var
/opt/homebrew/opt
/opt/homebrew/share/zsh
/opt/homebrew/share/zsh/site-functions
/opt/homebrew/var/homebrew
/opt/homebrew/var/homebrew/linked
/opt/homebrew/Cellar
/opt/homebrew/Caskroom
/opt/homebrew/Frameworks

Press RETURN/ENTER to continue or any other key to abort:

echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
eval "$(/opt/homebrew/bin/brew shellenv)"
brew --version


#####################
### Sublime
#####################
brew install --cask sublime-text
subl --version


#####################
### VS Code
#####################
brew install --cask visual-studio-code
code --version

installed prettier
<some settings.json> config for prettier


#####################
### MAC Productivity
#####################
Screenshot
  Where is it stored
Copy Paste
Cut Paste
Alt Tab
Karabiner Cleanup


#####################
### Git
#####################
brew install git
git --version

mng@iscs-mac ~ % which -a git
/opt/homebrew/bin/git
/usr/bin/git
/opt/homebrew/bin/git

mng@iscs-mac ~ % /opt/homebrew/bin/git --version
git version 2.51.0

mng@iscs-mac ~ % git --version
git version 2.39.2 (Apple Git-143)

echo 'export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"' >> ~/.zshrc
echo 'export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"' >> ~/.zprofile

# 1) Put Homebrew first in PATH (both files)
echo 'export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"' >> ~/.zshrc
echo 'export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"' >> ~/.zprofile

# 2) Reload and clear any alias/function/cache
source ~/.zshrc
unalias git 2>/dev/null || true
unset -f git 2>/dev/null || true
hash -r

# 3) Restart shell as login (picks up .zprofile too)
exec zsh -l


#####################
### Mouse Mapping
#####################
Retried volume up and volume down via Karabiner -- still cant
Tried via USB Overdrive -- cant


#####################
### Node LTS
#####################
brew install node@20

echo 'export PATH="/opt/homebrew/opt/node@20/bin:$PATH"' >> ~/.zshrc
echo 'export PATH="/opt/homebrew/opt/node@20/bin:$PATH"' >> ~/.zprofile
source ~/.zshrc
hash -r
exec zsh -l


#####################
### Github
#####################

mng@iscs-mac ~ % git config --global user.name "mgeorpe"
mng@iscs-mac ~ % git config --global --get user.name
mgeorpe

mng@iscs-mac ~ % git config --global user.email "mark.georpe@gmail.com"
mng@iscs-mac ~ % git config --global --get user.email
mark.georpe@gmail.com


#####################
### Folder Structure
#####################
-- Directories
 mkdir ~/Projects\ -\ Software
 -- Directories
 mkdir ~/Projects\ -\ Writing
 -- Directories
 mkdir ~/Projects\ -\ Escape Room


#####################
### SSH
#####################
-- Note on SSH
What SSH key is:
 - A private–public key pair that proves to GitHub “it’s really you.”
 -Stored locally on your machine.
Why you need it:
 - Lets you clone/pull/push to GitHub without typing username/password every time.
 - More secure than HTTPS with password.
Why we do it again on this Mac:
 - Each machine needs its own SSH key pair because the private key never leaves the computer.
 - You’ll add the public key from this Mac to your GitHub account (your Windows key remains untouched).

-- SSH
ls -la ~/.ssh #Check if ~/.ssh already exists

mkdir -p ~/.ssh # Create .ssh folder
chmod 700 ~/.ssh # Set corect permission

-- SSH Keygen
ssh-keygen -t ed25519 -C "mark.georpe@gmail.com"

-- Agent
eval "$(ssh-agent -s)"
ssh-add --apple-use-keychain ~/.ssh/id_ed25519

-- Public Key
cat ~/.ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAE828Gq6ZU+hDqaS3dO3RcAvIKpJ4TWDr44hr2EDMyU mark.georpe@gmail.com

Add that to github

-- Test
ssh -T git@github.com

type 'Yes' when asked by fingerprint

-- Clone
mng@iscs-mac Projects - Software % git clone git@github.com:mgeorpe/aec-admin.git



#####################
### Dependencies
#####################
ls -1 | grep -E 'yarn.lock|package-lock.json|pnpm-lock.yaml'

npm ci
