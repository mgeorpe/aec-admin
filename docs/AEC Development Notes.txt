AEC Development Notes


## ALIGNMENT ##
Okay time to reflect back and realign.
What were the macro goals again? 
What have we achieved? 
What should be our micro steps? 

## COMMIT ##
Okay I guess its time to document them in github.
I need step by step guidance on proper folder/file naming, proper commit messages.
Also if applicable: changelog, readme, etc.


## ??? ##
Do we need to do sanity checks (structural validation, data integrity)? 
What did we forget or missed? 
What were the macro goals again? 
What should be our micro steps? 
Can I see an updated documentation please so I can commit it in my github for tracking? 
What should I put in the changelog?


-----------------------
-- Reflect Sep 20 745pm [webdev]
-----------------------
Okay time to reflect back.
I am done with Local Setup in my macbook for about a day started yesterday since my Windows laptop is in repair center.

What have we achieved prior to my local macbook setup?
What were the macro goals? 

Ignore this questions if not applicable:
Do we need to do sanity checks (structural validation, data integrity)? 
What did we forget or missed? 
What should be our micro steps? 
Can I see an updated documentation please so I can commit it in my github for tracking? 
What should I put in the changelog?


-----------------------
-- Reflect Sep 20 757pm [webdev]
-----------------------
When i ask for an alignment, wait for my confirmation before making your responses long, that is why it is called alignment. That way, me scrolling up will not be tedious.

Also, I already added this docs before I asked you the alignment question and break some of them down and added many more:
1 Initial Steps
2 Folder Structure
3 Git Workflows
AEC-Admin Local Setup Macbook
CHANGELOG.md
db-design.md

So..

Maybe we can add a changelog and the one liner link

Then maybe we can resume work for the sql stuff (placeholder only). I dont want to document DDL or any other sql script if we still working on them. Kinda pointless. I will say when to do them when I validated all of the sanity in DB and if we wire them in UI.

Then maybe we can resume the DB work.

What do you think?


-----------------------
-- Color Coding [git setup]
-----------------------
in my vscode, I think we make it look like homebew. how can i make my terminal such that my commands and outputs are easily distinguishable. For example if my command is green, the output should have a different color.


-----------------------
-- Annoying Passphrase [git setup]
-----------------------
i observed that everytime i push, it asked for passphrase.. kinda annoying, i thought setting up the ssh is one time and the agent auto runs every time i typed a passphrase

hey before you give  this  code "ssh-add --apple-use-keychain ~/.ssh/id_ed25519"


-------------------------
-- Git Aliases [git setup]
-------------------------
i want aliases. some commands are too long
commit -> i want something like git cmt
status -> i want something like git st
i know we've setup something about fancy logline in another chat, can we do that here


-----------------------
-- Reflect Sep 20 1130pm [webdev]
-----------------------
I actually dont know what status guard on accounts_v2 is..
Lets say Ill say yes, can we do checks first. Because there might be some thing in place already right?


-----------------------
-- Behavior and Flow [webdev]
-----------------------
Couple of comments from your behavior

1. When we realign, one of the "next micro steps" was updated_at trigger. My comment here is you didnt include as of your steps to verify if the column exists. With all our conversation revolving around being careful and sanity, I am really disappointed. Please learn from this.

2. The way you write your steps is clunky. Why not try this approach. First we do the necessary database stuff + testing one at a time. After that stuff is done, then thats the only time you recommend if we are ready to document them in github. By approaching it this way, your responses will be shorter and we avoid long scroll ups every time we see an error. 

3. With all that being said, after you digested my #1 and #2 comments and gave proper responses. I want the clear instructions on how to document this in github. While file to create, where to create it, what content to paste, commit message, etc.


-----------------------
-- v_accounts_summary roll up view
   Draft v_accounts_summary to simplify sanity + UI wiring.
-----------------------
--1
Success. But before we proceed I noticed that the updated_at are all sep-21. Pretty crazy that we only tested account code 001 earlier. There might be some funny shit going on here.

--2
Still doesnt work.
Can I suggest something.
Can we make all updated_at sep-11 (this is the date of created at: 2025-09-11 16:06:28.898529+00)
Then, we can do a test to check if updated_at works well by updating one account 001.
Can we do this approach.

--3
Comment 1: i already said my preferred workflow yet you keep returning back to your old behavior which is pretty annoying. I thought GPT-5 has stronger reasoning.  

Comment 2: Your response in this should stick with [a] run this and then [b] verify... then your recommendation should be [c] do you want to test the trigger .... then once those triggers are fully tested/approved then the [d] docs can follow.

Enough with Ranting..

i run this

UPDATE public.accounts_v2
SET updated_at = TIMESTAMPTZ '2025-09-11 16:06:28.898529+00';

and then this

SELECT DISTINCT updated_at::date, COUNT(*)
FROM public.accounts_v2
GROUP BY 1;

and then got this

[
  {
    "updated_at": "2025-09-21",
    "count": 33
  }
]

WHY IS IT STILL 09-21??


-----------------------
-- 4. Sanity query set
   Save the queries you already ran (nulls, dupes, mapping, domains, status logic, year bounds) into sql/sanity/ as reusable scripts.
-----------------------
I really like your style in the previous sanity files.
You have included somethng like this   

-- Sanity: Updated_at baseline and trigger behavior

-- 1. Check that most rows are still on the Sep-11 baseline

-- 2. Spot rows where updated_at < created_at (should not happen)

-- 3. Spot rows where updated_at is much newer than baseline (expected only for rows you‚Äôve updated)

Concise and very straightforward. I like those plain english thing. It reduces my time to analyze each code on trying to predict what it does. You know, I lean towards being a business person mindset now rather than being "technical".

Can you adapt these styles and please regenerate your previous response?


-------------------------
-- verification realignment sep 22 2025 1:15am
-------------------------
Why you even write the DB confirm current state and say already ok or exists and verified. Plus we already just did that a while ago.

So the next steps you recommend are seeds?

I have reviewed another recommendation of you earlier that says something like "Draft ADR for updated_at guard + sanity framework (optional, but good for memory)." May I ask where does that fall in our "logical steps"?




-------------------------
-- üéØ Macro Goals  -- Sep 22-2025 1:15am
-------------------------
1. Database Foundation - stable schema, rules/guards
2. Sanity & observability - reusable sanity SQL, simple rollup views
3. Documentation Discipline - Keep db-design.md, ADRs, and CHANGELOG.md in sync with actual DB state.
4. Seed Trustworthy Data - Establish small, idempotent seeds for accounts_v2 and account_contacts.
5. Access & security (later) - Introduce RLS/policies after schema + seeds stabilize.
6. UI wiring - Use the rollup views + clean data to wire the Next.js UI with confidence.


-------------------------
-- üìå Micro Steps (next focus) -- Sep 22-2025 1:15am
-------------------------
1. DB: Confirm current state (quick)
- Constraints: service/status/type/year; status guard; FK(country) ‚Äî already OK.
- Triggers: updated_at ‚Äî already OK.
- View: v_accounts_summary ‚Äî exists and verified.
- Is it good do this now or no? -> Draft ADR for updated_at guard + sanity framework (optional, but good for memory).

2. Seeds: Add minimal, idempotent inserts
- sql/seeds/accounts_v2_seed.sql ‚Üí INSERT ‚Ä¶ WHERE NOT EXISTS by account_code.
- sql/seeds/account_contacts_seed.sql ‚Üí INSERT ‚Ä¶ WHERE NOT EXISTS by (account_code, full_name, role).
- Re-run sanity scripts after seeding.

3. Docs: Update changelog only after seeds succeed
- Append ‚ÄúSeeds added (accounts, contacts) and sanity re-check passed.‚Äù

4. (Optional next) Views: Enrich v_accounts_summary
- Add derived fields only if rules are clear (e.g., pick a primary contact rule).
- Plan for v_invoice_settlements (rollup for later billing).

5. (Later) RLS
- Enable RLS and add minimal read policy once UI fetch paths are known.


-------------------------
-- ???
-------------------------






