AEC-Admin Development Notes in Mac

########################
## Resume Work workflow (When you return to the computer)
########################

~~~~~~~~~~~~~~~~~~~~~~~~
~~ 1. Sync & inspect
~~~~~~~~~~~~~~~~~~~~~~~~

git branch --show-current → confirm branch
git fetch
git status → see if behind / uncommitted changes
   # Behind means there are commits in Github that you dont have locally yet
   # Uncommitted means you have modified files locally that are not yet commiited.
     ## If you dont commit them, they stay dirty in your working directory
If behind: git pull --rebase origin <current-branch>
   # You need to pull them before continuing, so your work is based on the latest code.



~~~~~~~~~~~~~~~~~~~~~~~~~
~~ 2. Handle partial work
~~~~~~~~~~~~~~~~~~~~~~~~~

If files changed but not committed:
  Keep editing or make a small WIP checkpoint:
  git add -A
  git commit -m "chore(wip): checkpoint before continuing"

Continue
  Keep coding; commit in small, logical chunks.




########################
## Git Branching policy
########################

# 1) Start from the latest main
git checkout main
git pull origin main

# 2) Create a short-lived branch
git checkout -b docs/readme-sync-checklist

# 3) Edit, stage, commit
# (edit README.md)
git add README.md
git commit -m "docs: update README (sync checklist)"

# 4) Push branch
git push -u origin docs/readme-sync-checklist

# 5) Open GitHub → create Pull Request → merge when green
# (after merge, optionally delete the branch locally and remote)
git checkout main
git pull origin main
git branch -d docs/readme-sync-checklist
git push origin --delete docs/readme-sync-checklist


########################
## Git Pushing Workflow
########################
git status
git add .
git commit -m "<type>: Useful commit message"
   # type = docs, schema, bugfix, hotfix (urgent), spike (experiment)
git push origin main

done in doing some edits in readme and some other files and commoit